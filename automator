import os
import time
import json
import shutil
import datetime as dt
from threading import Thread, Lock
from queue import Queue
from models import SnowflakeConsole, SnowFlakeDW, Task, Logger
from automator_utilities import find_main_dir


class Worker(Thread):
    """Thread executing tasks from a given tasks queue"""
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            task = self.tasks.get()
            try:
                task.run_task()
            except Exception as e:
                print(e)
                raise e
            finally:
                self.tasks.task_done()


class ThreadPool:
    """ Pool of threads consuming tasks for a queue """
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            Worker(self.tasks)

    def add_task(self, task):
        """ Add a tasks to the queue """
        self.tasks.put(task)

    def map(self, args_list):
        """ Add a list of tasks to queue """
        for task in args_list:
            self.add_task(task)

    def wait_completion(self):
        """ Wait for completion of all the tasks in the queue """
        self.tasks.join()


class Automator:
    def __init__(self):
        """
        Automator Settings
        """
        # Database Object to use
        self.db = SnowFlakeDW()
        self.db.set_user('JDLAURET')
        self.db.set_schema('D_POST_INSTALL')
        self.db.open_connection()
        self.dw = SnowflakeConsole(self.db)
        # Schema and Table containing task instructions
        self.task_table = 'T_AUTO_TASKS'

        self.task_table_column_names = []
        self.task_table_data = []

        # All Task Objects Store by Task ID
        self.task_objects = {}

        # Separated Task Lists
        self.python_tasks = []
        self.command_tasks = []
        self.query_tasks = []

        # Max number of threads to have running
        self.num_threads = 5
        self.pool = ThreadPool(self.num_threads)

    def set_database(self, new_db):
        """
        Change Database Object
        :param new_db: New DB Object
        """
        self.db = new_db

    def set_database_table(self, table_name):
        """
        Change Task Table Name
        :param table_name: New Table Name including Schema
        """
        self.task_table = table_name

    def backup_files(self):
        settings_file = 'settings.json'
        date_format = "%m/%d/%Y"
        today = dt.datetime.today()
        backup_dir = 'file_backups'
        storage_dir = 'file_storage'

        with open(settings_file) as infile:
            settings = json.load(infile)

        if 'storage_file_backup' not in settings.keys():
            settings['storage_file_backup'] = {}

        if 'last_run' not in settings['storage_file_backup'].keys():
            settings['storage_file_backup']['last_run'] = today.strftime(date_format)

        last_backup = settings['storage_file_backup'].get('last_run')

        if last_backup == "":
            last_backup = '1/1/2014'

        if dt.datetime.strptime(last_backup, date_format).date() != today.date() \
                and dt.datetime.strptime(last_backup, date_format).date() < today.date():
            day_1 = os.path.join(backup_dir, '1 - Day 1')
            day_2 = os.path.join(backup_dir, '2 - Day 2')
            day_3 = os.path.join(backup_dir, '3 - Day 3')
            day_4 = os.path.join(backup_dir, '4 - Day 4')
            day_5 = os.path.join(backup_dir, '5 - Day 5')

            if os.listdir(day_5):
                for file in os.listdir(day_5):
                    file_path = os.path.join(day_5, file)
                    try:
                        if os.path.isfile(file_path):
                            os.unlink(file_path)
                    except Exception as e:
                        pass

            if os.listdir(day_4):
                for file in os.listdir(day_4):
                    if file != 'desktop.ini':
                        current_path = os.path.join(day_4, file)
                        new_path = os.path.join(day_5, os.path.basename(file))
                        shutil.move(current_path, new_path)

            if os.listdir(day_3):
                for file in os.listdir(day_3):
                    if file != 'desktop.ini':
                        current_path = os.path.join(day_3, file)
                        new_path = os.path.join(day_4, os.path.basename(file))
                        shutil.move(current_path, new_path)

            if os.listdir(day_2):
                for file in os.listdir(day_2):
                    if file != 'desktop.ini':
                        current_path = os.path.join(day_2, file)
                        new_path = os.path.join(day_3, os.path.basename(file))
                        shutil.move(current_path, new_path)

            if os.listdir(day_1):
                for file in os.listdir(day_1):
                    if file != 'desktop.ini':
                        current_path = os.path.join(day_1, file)
                        new_path = os.path.join(day_2, os.path.basename(file))
                        shutil.move(current_path, new_path)

            if os.listdir(storage_dir):
                for file in os.listdir(storage_dir):
                    if file != 'desktop.ini':
                        current_path = os.path.join(storage_dir, file)
                        new_path = os.path.join(day_1, os.path.basename(file))
                        shutil.move(current_path, new_path)

            settings['storage_file_backup']['last_run'] = today.strftime(date_format)
            with open(settings_file) as outfile:
                json.dump(settings, outfile, indent=4)

    def refresh_task_data(self):
        """
        Get Task Data from Database
        """
        self.dw.get_table_data(self.task_table)
        self.task_table_column_names = self.dw.column_names
        self.task_table_data = self.dw.query_results

    def create_task_objects(self):
        """
        Add tasks to Task Object Dictionary
        """
        main_dir = find_main_dir(__file__)
        for task in self.task_table_data:
            new_task = Task(task, self.task_table_column_names, self.db, working_dir=main_dir)
            if new_task.id not in self.task_objects.keys():
                self.task_objects[new_task.id] = new_task

    def organize_tasks(self):
        """
        Sort tasks into 3 list
        Python Task, SQL Command Tasks, and Query Tasks
        """
        for key, task in self.task_objects.items():
            if task.data_source is not None \
                    and task.operational.lower() == 'operational':
                if task.data_source.lower() == 'python' and task.operational:
                    self.python_tasks.append(task)
                if task.data_source.lower() == 'sql command':
                    self.command_tasks.append(task)
                if task.data_source.lower() == 'sql':
                    self.query_tasks.append(task)

    def run_queue(self, list):
        """
        Add list of tasks to the Run Queue
        :param list: The list of tasks to add to the Run Queue
        """
        self.pool.map(list)
        self.pool.wait_completion()

    def loop_sleep(self):
        """
        Sleep until the start of the next 5 minute interval
        """
        print('Automator sleeping')
        now = dt.datetime.now()
        minutes_to_sleep = 5 - now.minute % 5
        time.sleep((minutes_to_sleep * 60) - now.second)
        print('Automator Loop Restarting')

    def run_automator(self):
        # Start Program Loop
        while True:
            # Backup Local Files
            self.backup_files()
            # Get Task Data
            self.refresh_task_data()
            # Create Task Objects
            self.create_task_objects()
            # Sort Tasks into Lists
            self.organize_tasks()

            # Place Python Tasks into the Queue
            self.run_queue(self.python_tasks)

            # Place SQL Command Tasks into the Queue
            self.run_queue(self.command_tasks)

            # Place SQL Queries into the Queue
            self.run_queue(self.query_tasks)

            # Sleep till next 5 minute interval 12:00, 12:05, etc
            self.loop_sleep()


if __name__ == '__main__':
    # Start Automator
    print('Report Automation Tool Starting')
    app = Automator()
    app.run_automator()

