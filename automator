import queue
import threading
import time
from models import DataWarehouse, Task


def create_task_objects():
    dw = DataWarehouse('admin')
    dw.get_table_data(task_table)
    task_data = dw.results
    task_header = dw.column_names

    return [Task(row, task_header) for row in task_data]


def worker(task_obj):
    task_obj.run_task()


class Automator:
    def __init__(self):
        pass





if __name__ == '__main__':

    task_table = 'JDLAURET.T_AUTO_TASKS'

    while True:
        tasks = create_task_objects()
        python_queue = queue.Queue()
        python_test_list = []

        command_queue = queue.Queue()
        command_test_list = []

        query_queue = queue.Queue()
        query_test_list = []

        for task in tasks:
            operational = task.task_data.get('operational')
            task_type = task.task_data.get('data_source')
            t = threading.Thread(target=worker,
                                 args=(task,),
                                 daemon=True,
                                 name='thread {}'.format(task.task_name))
            if operational.lower() == 'operational':
                if task_type.lower() == 'python':
                    python_queue.put(t)
                    python_test_list.append(task)

                elif task_type.lower() == 'sql command':
                    command_test_list.append(task)
                    command_queue.put(t)

                elif task_type.lower() == 'sql':
                    query_test_list.append(task)
                    query_queue.put(t)

        for item in query_test_list:
            item.run_task()
            p = ''

        # while not python_queue.empty():
        #     script = python_queue.get()
        #     script.start()
        #     print(script.name, 'thread started')
        #     script.join()
        #
        # while not command_queue.empty():
        #     command = command_queue.get()
        #     command.start()
        #     print(command.name, 'thread started')
        #     command.join()
        #
        # while not query_queue.empty():
        #     query = query_queue.get()
        #     query.start()
        #     print(query.name, 'thread started')
        #     query.join()